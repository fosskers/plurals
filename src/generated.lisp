(in-package :plurals)

#+nil
(category :en "1")

(defun category (locale s)
  "Given a string of a number and a target locale, determine the plural category of the number."
  (let ((n (plurals:op-n s))
        (i (plurals:op-i s))
        (v (plurals:op-v s))
        (f (plurals:op-f s))
        (tee (plurals:op-t s))
        (e (plurals:op-e s)))
    (case locale
      (:cy
       (cond ((= n 6) :many) ((= n 3) :few) ((= n 2) :two) ((= n 1) :one)
             ((= n 0) :zero) (t :other)))
      (:ar
       (cond ((<= 11 (mod n 100) 99) :many) ((<= 3 (mod n 100) 10) :few)
             ((= n 2) :two) ((= n 1) :one) ((= n 0) :zero) (t :other)))
      (:ars
       (cond ((<= 11 (mod n 100) 99) :many) ((<= 3 (mod n 100) 10) :few)
             ((= n 2) :two) ((= n 1) :one) ((= n 0) :zero) (t :other)))
      (:kw
       (cond
         ((and (not (= n 1))
               (let ((x (mod n 100)))
                 (or (= x 1) (= x 21) (= x 41) (= x 61) (= x 81))))
          :many)
         ((let ((x (mod n 100)))
            (or (= x 3) (= x 23) (= x 43) (= x 63) (= x 83)))
          :few)
         ((or
           (let ((x (mod n 100)))
             (or (= x 2) (= x 22) (= x 42) (= x 62) (= x 82)))
           (and (= (mod n 1000) 0)
                (let ((x (mod n 100000)))
                  (or (<= 1000 x 20000) (= x 40000) (= x 60000) (= x 80000))))
           (and (not (= n 0)) (= (mod n 1000000) 100000)))
          :two)
         ((= n 1) :one) ((= n 0) :zero) (t :other)))
      (:sgs
       (cond ((not (= f 0)) :many)
             ((and (not (= n 2)) (<= 2 (mod n 10) 9)
                   (not (<= 11 (mod n 100) 19)))
              :few)
             ((= n 2) :two)
             ((and (= (mod n 10) 1) (not (= (mod n 100) 11))) :one)
             (t :other)))
      (:gv
       (cond ((not (= v 0)) :many)
             ((and (= v 0)
                   (let ((x (mod i 100)))
                     (or (= x 0) (= x 20) (= x 40) (= x 60) (= x 80))))
              :few)
             ((and (= v 0) (= (mod i 10) 2)) :two)
             ((and (= v 0) (= (mod i 10) 1)) :one) (t :other)))
      (:ga
       (cond ((<= 7 n 10) :many) ((<= 3 n 6) :few) ((= n 2) :two)
             ((= n 1) :one) (t :other)))
      (:mt
       (cond ((<= 11 (mod n 100) 19) :many)
             ((or (= n 0) (<= 3 (mod n 100) 10)) :few) ((= n 2) :two)
             ((= n 1) :one) (t :other)))
      (:br
       (cond ((and (not (= n 0)) (= (mod n 1000000) 0)) :many)
             ((and
               (let ((x (mod n 10)))
                 (or (<= 3 x 4) (= x 9)))
               (not
                (let ((x (mod n 100)))
                  (or (<= 10 x 19) (<= 70 x 79) (<= 90 x 99)))))
              :few)
             ((and (= (mod n 10) 2)
                   (not
                    (let ((x (mod n 100)))
                      (or (= x 12) (= x 72) (= x 92)))))
              :two)
             ((and (= (mod n 10) 1)
                   (not
                    (let ((x (mod n 100)))
                      (or (= x 11) (= x 71) (= x 91)))))
              :one)
             (t :other)))
      (:ru
       (cond
         ((or (and (= v 0) (= (mod i 10) 0)) (and (= v 0) (<= 5 (mod i 10) 9))
              (and (= v 0) (<= 11 (mod i 100) 14)))
          :many)
         ((and (= v 0) (<= 2 (mod i 10) 4) (not (<= 12 (mod i 100) 14))) :few)
         ((and (= v 0) (= (mod i 10) 1) (not (= (mod i 100) 11))) :one)
         (t :other)))
      (:uk
       (cond
         ((or (and (= v 0) (= (mod i 10) 0)) (and (= v 0) (<= 5 (mod i 10) 9))
              (and (= v 0) (<= 11 (mod i 100) 14)))
          :many)
         ((and (= v 0) (<= 2 (mod i 10) 4) (not (<= 12 (mod i 100) 14))) :few)
         ((and (= v 0) (= (mod i 10) 1) (not (= (mod i 100) 11))) :one)
         (t :other)))
      (:lt
       (cond ((not (= f 0)) :many)
             ((and (<= 2 (mod n 10) 9) (not (<= 11 (mod n 100) 19))) :few)
             ((and (= (mod n 10) 1) (not (<= 11 (mod n 100) 19))) :one)
             (t :other)))
      (:be
       (cond
         ((or (= (mod n 10) 0) (<= 5 (mod n 10) 9) (<= 11 (mod n 100) 14))
          :many)
         ((and (<= 2 (mod n 10) 4) (not (<= 12 (mod n 100) 14))) :few)
         ((and (= (mod n 10) 1) (not (= (mod n 100) 11))) :one) (t :other)))
      (:pl
       (cond
         ((or (and (= v 0) (not (= i 1)) (<= 0 (mod i 10) 1))
              (and (= v 0) (<= 5 (mod i 10) 9))
              (and (= v 0) (<= 12 (mod i 100) 14)))
          :many)
         ((and (= v 0) (<= 2 (mod i 10) 4) (not (<= 12 (mod i 100) 14))) :few)
         ((and (= i 1) (= v 0)) :one) (t :other)))
      (:cs
       (cond ((not (= v 0)) :many) ((and (<= 2 i 4) (= v 0)) :few)
             ((and (= i 1) (= v 0)) :one) (t :other)))
      (:sk
       (cond ((not (= v 0)) :many) ((and (<= 2 i 4) (= v 0)) :few)
             ((and (= i 1) (= v 0)) :one) (t :other)))
      (:dsb
       (cond
         ((or (and (= v 0) (<= 3 (mod i 100) 4)) (<= 3 (mod f 100) 4)) :few)
         ((or (and (= v 0) (= (mod i 100) 2)) (= (mod f 100) 2)) :two)
         ((or (and (= v 0) (= (mod i 100) 1)) (= (mod f 100) 1)) :one)
         (t :other)))
      (:hsb
       (cond
         ((or (and (= v 0) (<= 3 (mod i 100) 4)) (<= 3 (mod f 100) 4)) :few)
         ((or (and (= v 0) (= (mod i 100) 2)) (= (mod f 100) 2)) :two)
         ((or (and (= v 0) (= (mod i 100) 1)) (= (mod f 100) 1)) :one)
         (t :other)))
      (:sl
       (cond ((or (and (= v 0) (<= 3 (mod i 100) 4)) (not (= v 0))) :few)
             ((and (= v 0) (= (mod i 100) 2)) :two)
             ((and (= v 0) (= (mod i 100) 1)) :one) (t :other)))
      (:gd
       (cond
         ((let ((x n))
            (or (<= 3 x 10) (<= 13 x 19)))
          :few)
         ((let ((x n))
            (or (= x 2) (= x 12)))
          :two)
         ((let ((x n))
            (or (= x 1) (= x 11)))
          :one)
         (t :other)))
      (:es
       (cond
         ((or (and (= e 0) (not (= i 0)) (= (mod i 1000000) 0) (= v 0))
              (not (<= 0 e 5)))
          :many)
         ((= n 1) :one) (t :other)))
      (:ca
       (cond
         ((or (and (= e 0) (not (= i 0)) (= (mod i 1000000) 0) (= v 0))
              (not (<= 0 e 5)))
          :many)
         ((and (= i 1) (= v 0)) :one) (t :other)))
      (:it
       (cond
         ((or (and (= e 0) (not (= i 0)) (= (mod i 1000000) 0) (= v 0))
              (not (<= 0 e 5)))
          :many)
         ((and (= i 1) (= v 0)) :one) (t :other)))
      (:lld
       (cond
         ((or (and (= e 0) (not (= i 0)) (= (mod i 1000000) 0) (= v 0))
              (not (<= 0 e 5)))
          :many)
         ((and (= i 1) (= v 0)) :one) (t :other)))
      (:pt_pt
       (cond
         ((or (and (= e 0) (not (= i 0)) (= (mod i 1000000) 0) (= v 0))
              (not (<= 0 e 5)))
          :many)
         ((and (= i 1) (= v 0)) :one) (t :other)))
      (:scn
       (cond
         ((or (and (= e 0) (not (= i 0)) (= (mod i 1000000) 0) (= v 0))
              (not (<= 0 e 5)))
          :many)
         ((and (= i 1) (= v 0)) :one) (t :other)))
      (:vec
       (cond
         ((or (and (= e 0) (not (= i 0)) (= (mod i 1000000) 0) (= v 0))
              (not (<= 0 e 5)))
          :many)
         ((and (= i 1) (= v 0)) :one) (t :other)))
      (:pt
       (cond
         ((or (and (= e 0) (not (= i 0)) (= (mod i 1000000) 0) (= v 0))
              (not (<= 0 e 5)))
          :many)
         ((<= 0 i 1) :one) (t :other)))
      (:fr
       (cond
         ((or (and (= e 0) (not (= i 0)) (= (mod i 1000000) 0) (= v 0))
              (not (<= 0 e 5)))
          :many)
         ((let ((x i))
            (or (= x 0) (= x 1)))
          :one)
         (t :other)))
      (:bs
       (cond
         ((or (and (= v 0) (<= 2 (mod i 10) 4) (not (<= 12 (mod i 100) 14)))
              (and (<= 2 (mod f 10) 4) (not (<= 12 (mod f 100) 14))))
          :few)
         ((or (and (= v 0) (= (mod i 10) 1) (not (= (mod i 100) 11)))
              (and (= (mod f 10) 1) (not (= (mod f 100) 11))))
          :one)
         (t :other)))
      (:hr
       (cond
         ((or (and (= v 0) (<= 2 (mod i 10) 4) (not (<= 12 (mod i 100) 14)))
              (and (<= 2 (mod f 10) 4) (not (<= 12 (mod f 100) 14))))
          :few)
         ((or (and (= v 0) (= (mod i 10) 1) (not (= (mod i 100) 11)))
              (and (= (mod f 10) 1) (not (= (mod f 100) 11))))
          :one)
         (t :other)))
      (:sh
       (cond
         ((or (and (= v 0) (<= 2 (mod i 10) 4) (not (<= 12 (mod i 100) 14)))
              (and (<= 2 (mod f 10) 4) (not (<= 12 (mod f 100) 14))))
          :few)
         ((or (and (= v 0) (= (mod i 10) 1) (not (= (mod i 100) 11)))
              (and (= (mod f 10) 1) (not (= (mod f 100) 11))))
          :one)
         (t :other)))
      (:sr
       (cond
         ((or (and (= v 0) (<= 2 (mod i 10) 4) (not (<= 12 (mod i 100) 14)))
              (and (<= 2 (mod f 10) 4) (not (<= 12 (mod f 100) 14))))
          :few)
         ((or (and (= v 0) (= (mod i 10) 1) (not (= (mod i 100) 11)))
              (and (= (mod f 10) 1) (not (= (mod f 100) 11))))
          :one)
         (t :other)))
      (:mo
       (cond
         ((or (not (= v 0)) (= n 0) (and (not (= n 1)) (<= 1 (mod n 100) 19)))
          :few)
         ((and (= i 1) (= v 0)) :one) (t :other)))
      (:ro
       (cond
         ((or (not (= v 0)) (= n 0) (and (not (= n 1)) (<= 1 (mod n 100) 19)))
          :few)
         ((and (= i 1) (= v 0)) :one) (t :other)))
      (:shi (cond ((<= 2 n 10) :few) ((or (= i 0) (= n 1)) :one) (t :other)))
      (:iu (cond ((= n 2) :two) ((= n 1) :one) (t :other)))
      (:naq (cond ((= n 2) :two) ((= n 1) :one) (t :other)))
      (:sat (cond ((= n 2) :two) ((= n 1) :one) (t :other)))
      (:se (cond ((= n 2) :two) ((= n 1) :one) (t :other)))
      (:sma (cond ((= n 2) :two) ((= n 1) :one) (t :other)))
      (:smi (cond ((= n 2) :two) ((= n 1) :one) (t :other)))
      (:smj (cond ((= n 2) :two) ((= n 1) :one) (t :other)))
      (:smn (cond ((= n 2) :two) ((= n 1) :one) (t :other)))
      (:sms (cond ((= n 2) :two) ((= n 1) :one) (t :other)))
      (:he
       (cond ((and (= i 2) (= v 0)) :two)
             ((or (and (= i 1) (= v 0)) (and (= i 0) (not (= v 0)))) :one)
             (t :other)))
      (:iw
       (cond ((and (= i 2) (= v 0)) :two)
             ((or (and (= i 1) (= v 0)) (and (= i 0) (not (= v 0)))) :one)
             (t :other)))
      (:ksh (cond ((= n 1) :one) ((= n 0) :zero) (t :other)))
      (:blo (cond ((= n 1) :one) ((= n 0) :zero) (t :other)))
      (:lag
       (cond
         ((and
           (let ((x i))
             (or (= x 0) (= x 1)))
           (not (= n 0)))
          :one)
         ((= n 0) :zero) (t :other)))
      (:lv
       (cond
         ((or (and (= (mod n 10) 1) (not (= (mod n 100) 11)))
              (and (= v 2) (= (mod f 10) 1) (not (= (mod f 100) 11)))
              (and (not (= v 2)) (= (mod f 10) 1)))
          :one)
         ((or (= (mod n 10) 0) (<= 11 (mod n 100) 19)
              (and (= v 2) (<= 11 (mod f 100) 19)))
          :zero)
         (t :other)))
      (:prg
       (cond
         ((or (and (= (mod n 10) 1) (not (= (mod n 100) 11)))
              (and (= v 2) (= (mod f 10) 1) (not (= (mod f 100) 11)))
              (and (not (= v 2)) (= (mod f 10) 1)))
          :one)
         ((or (= (mod n 10) 0) (<= 11 (mod n 100) 19)
              (and (= v 2) (<= 11 (mod f 100) 19)))
          :zero)
         (t :other)))
      (:ceb
       (cond
         ((or
           (and (= v 0)
                (let ((x i))
                  (or (= x 1) (= x 2) (= x 3))))
           (and (= v 0)
                (not
                 (let ((x (mod i 10)))
                   (or (= x 4) (= x 6) (= x 9)))))
           (and (not (= v 0))
                (not
                 (let ((x (mod f 10)))
                   (or (= x 4) (= x 6) (= x 9))))))
          :one)
         (t :other)))
      (:fil
       (cond
         ((or
           (and (= v 0)
                (let ((x i))
                  (or (= x 1) (= x 2) (= x 3))))
           (and (= v 0)
                (not
                 (let ((x (mod i 10)))
                   (or (= x 4) (= x 6) (= x 9)))))
           (and (not (= v 0))
                (not
                 (let ((x (mod f 10)))
                   (or (= x 4) (= x 6) (= x 9))))))
          :one)
         (t :other)))
      (:tl
       (cond
         ((or
           (and (= v 0)
                (let ((x i))
                  (or (= x 1) (= x 2) (= x 3))))
           (and (= v 0)
                (not
                 (let ((x (mod i 10)))
                   (or (= x 4) (= x 6) (= x 9)))))
           (and (not (= v 0))
                (not
                 (let ((x (mod f 10)))
                   (or (= x 4) (= x 6) (= x 9))))))
          :one)
         (t :other)))
      (:mk
       (cond
         ((or (and (= v 0) (= (mod i 10) 1) (not (= (mod i 100) 11)))
              (and (= (mod f 10) 1) (not (= (mod f 100) 11))))
          :one)
         (t :other)))
      (:is
       (cond
         ((or (and (= tee 0) (= (mod i 10) 1) (not (= (mod i 100) 11)))
              (and (= (mod tee 10) 1) (not (= (mod tee 100) 11))))
          :one)
         (t :other)))
      (:da
       (cond
         ((or (= n 1)
              (and (not (= tee 0))
                   (let ((x i))
                     (or (= x 0) (= x 1)))))
          :one)
         (t :other)))
      (:af (cond ((= n 1) :one) (t :other)))
      (:an (cond ((= n 1) :one) (t :other)))
      (:asa (cond ((= n 1) :one) (t :other)))
      (:az (cond ((= n 1) :one) (t :other)))
      (:bal (cond ((= n 1) :one) (t :other)))
      (:bem (cond ((= n 1) :one) (t :other)))
      (:bez (cond ((= n 1) :one) (t :other)))
      (:bg (cond ((= n 1) :one) (t :other)))
      (:brx (cond ((= n 1) :one) (t :other)))
      (:ce (cond ((= n 1) :one) (t :other)))
      (:cgg (cond ((= n 1) :one) (t :other)))
      (:chr (cond ((= n 1) :one) (t :other)))
      (:ckb (cond ((= n 1) :one) (t :other)))
      (:dv (cond ((= n 1) :one) (t :other)))
      (:ee (cond ((= n 1) :one) (t :other)))
      (:el (cond ((= n 1) :one) (t :other)))
      (:eo (cond ((= n 1) :one) (t :other)))
      (:eu (cond ((= n 1) :one) (t :other)))
      (:fo (cond ((= n 1) :one) (t :other)))
      (:fur (cond ((= n 1) :one) (t :other)))
      (:gsw (cond ((= n 1) :one) (t :other)))
      (:ha (cond ((= n 1) :one) (t :other)))
      (:haw (cond ((= n 1) :one) (t :other)))
      (:hu (cond ((= n 1) :one) (t :other)))
      (:jgo (cond ((= n 1) :one) (t :other)))
      (:jmc (cond ((= n 1) :one) (t :other)))
      (:ka (cond ((= n 1) :one) (t :other)))
      (:kaj (cond ((= n 1) :one) (t :other)))
      (:kcg (cond ((= n 1) :one) (t :other)))
      (:kk (cond ((= n 1) :one) (t :other)))
      (:kkj (cond ((= n 1) :one) (t :other)))
      (:kl (cond ((= n 1) :one) (t :other)))
      (:ks (cond ((= n 1) :one) (t :other)))
      (:ksb (cond ((= n 1) :one) (t :other)))
      (:ku (cond ((= n 1) :one) (t :other)))
      (:ky (cond ((= n 1) :one) (t :other)))
      (:lb (cond ((= n 1) :one) (t :other)))
      (:lg (cond ((= n 1) :one) (t :other)))
      (:mas (cond ((= n 1) :one) (t :other)))
      (:mgo (cond ((= n 1) :one) (t :other)))
      (:ml (cond ((= n 1) :one) (t :other)))
      (:mn (cond ((= n 1) :one) (t :other)))
      (:mr (cond ((= n 1) :one) (t :other)))
      (:nah (cond ((= n 1) :one) (t :other)))
      (:nb (cond ((= n 1) :one) (t :other)))
      (:nd (cond ((= n 1) :one) (t :other)))
      (:ne (cond ((= n 1) :one) (t :other)))
      (:nn (cond ((= n 1) :one) (t :other)))
      (:nnh (cond ((= n 1) :one) (t :other)))
      (:no (cond ((= n 1) :one) (t :other)))
      (:nr (cond ((= n 1) :one) (t :other)))
      (:ny (cond ((= n 1) :one) (t :other)))
      (:nyn (cond ((= n 1) :one) (t :other)))
      (:om (cond ((= n 1) :one) (t :other)))
      (:or (cond ((= n 1) :one) (t :other)))
      (:os (cond ((= n 1) :one) (t :other)))
      (:pap (cond ((= n 1) :one) (t :other)))
      (:ps (cond ((= n 1) :one) (t :other)))
      (:rm (cond ((= n 1) :one) (t :other)))
      (:rof (cond ((= n 1) :one) (t :other)))
      (:rwk (cond ((= n 1) :one) (t :other)))
      (:saq (cond ((= n 1) :one) (t :other)))
      (:sd (cond ((= n 1) :one) (t :other)))
      (:sdh (cond ((= n 1) :one) (t :other)))
      (:seh (cond ((= n 1) :one) (t :other)))
      (:sn (cond ((= n 1) :one) (t :other)))
      (:so (cond ((= n 1) :one) (t :other)))
      (:sq (cond ((= n 1) :one) (t :other)))
      (:ss (cond ((= n 1) :one) (t :other)))
      (:ssy (cond ((= n 1) :one) (t :other)))
      (:st (cond ((= n 1) :one) (t :other)))
      (:syr (cond ((= n 1) :one) (t :other)))
      (:ta (cond ((= n 1) :one) (t :other)))
      (:te (cond ((= n 1) :one) (t :other)))
      (:teo (cond ((= n 1) :one) (t :other)))
      (:tig (cond ((= n 1) :one) (t :other)))
      (:tk (cond ((= n 1) :one) (t :other)))
      (:tn (cond ((= n 1) :one) (t :other)))
      (:tr (cond ((= n 1) :one) (t :other)))
      (:ts (cond ((= n 1) :one) (t :other)))
      (:ug (cond ((= n 1) :one) (t :other)))
      (:uz (cond ((= n 1) :one) (t :other)))
      (:ve (cond ((= n 1) :one) (t :other)))
      (:vo (cond ((= n 1) :one) (t :other)))
      (:vun (cond ((= n 1) :one) (t :other)))
      (:wae (cond ((= n 1) :one) (t :other)))
      (:xh (cond ((= n 1) :one) (t :other)))
      (:xog (cond ((= n 1) :one) (t :other)))
      (:tzm (cond ((or (<= 0 n 1) (<= 11 n 99)) :one) (t :other)))
      (:ak (cond ((<= 0 n 1) :one) (t :other)))
      (:bho (cond ((<= 0 n 1) :one) (t :other)))
      (:csw (cond ((<= 0 n 1) :one) (t :other)))
      (:guw (cond ((<= 0 n 1) :one) (t :other)))
      (:ln (cond ((<= 0 n 1) :one) (t :other)))
      (:mg (cond ((<= 0 n 1) :one) (t :other)))
      (:nso (cond ((<= 0 n 1) :one) (t :other)))
      (:pa (cond ((<= 0 n 1) :one) (t :other)))
      (:ti (cond ((<= 0 n 1) :one) (t :other)))
      (:wa (cond ((<= 0 n 1) :one) (t :other)))
      (:si
       (cond
         ((or
           (let ((x n))
             (or (= x 0) (= x 1)))
           (and (= i 0) (= f 1)))
          :one)
         (t :other)))
      (:ast (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:de (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:en (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:et (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:fi (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:fy (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:gl (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:ia (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:io (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:ji (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:lij (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:nl (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:sc (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:sv (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:sw (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:ur (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:yi (cond ((and (= i 1) (= v 0)) :one) (t :other)))
      (:ff
       (cond
         ((let ((x i))
            (or (= x 0) (= x 1)))
          :one)
         (t :other)))
      (:hy
       (cond
         ((let ((x i))
            (or (= x 0) (= x 1)))
          :one)
         (t :other)))
      (:kab
       (cond
         ((let ((x i))
            (or (= x 0) (= x 1)))
          :one)
         (t :other)))
      (:am (cond ((or (= i 0) (= n 1)) :one) (t :other)))
      (:as (cond ((or (= i 0) (= n 1)) :one) (t :other)))
      (:bn (cond ((or (= i 0) (= n 1)) :one) (t :other)))
      (:doi (cond ((or (= i 0) (= n 1)) :one) (t :other)))
      (:fa (cond ((or (= i 0) (= n 1)) :one) (t :other)))
      (:gu (cond ((or (= i 0) (= n 1)) :one) (t :other)))
      (:hi (cond ((or (= i 0) (= n 1)) :one) (t :other)))
      (:kn (cond ((or (= i 0) (= n 1)) :one) (t :other)))
      (:kok (cond ((or (= i 0) (= n 1)) :one) (t :other)))
      (:kok_latn (cond ((or (= i 0) (= n 1)) :one) (t :other)))
      (:pcm (cond ((or (= i 0) (= n 1)) :one) (t :other)))
      (:zu (cond ((or (= i 0) (= n 1)) :one) (t :other)))
      (:bm :other)
      (:bo :other)
      (:dz :other)
      (:hnj :other)
      (:id :other)
      (:ig :other)
      (:ii :other)
      (:in :other)
      (:ja :other)
      (:jbo :other)
      (:jv :other)
      (:jw :other)
      (:kde :other)
      (:kea :other)
      (:km :other)
      (:ko :other)
      (:lkt :other)
      (:lo :other)
      (:ms :other)
      (:my :other)
      (:nqo :other)
      (:osa :other)
      (:root :other)
      (:sah :other)
      (:ses :other)
      (:sg :other)
      (:su :other)
      (:th :other)
      (:to :other)
      (:tpi :other)
      (:vi :other)
      (:wo :other)
      (:yo :other)
      (:yue :other)
      (:zh :other))))
